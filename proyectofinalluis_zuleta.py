# -*- coding: utf-8 -*-
"""ProyectoFinalLuis_Zuleta.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A4iL8vUHPtS4ka1o8dFIZQAP2VjUem8Z
"""

from google.colab import files
import pandas as pd

# Cargar el archivo en un DataFrame
file_path = "datos_desercion_balanceado.xlsx"  # Nombre del archivo
df = pd.read_excel(file_path)

# Mostrar las primeras filas para verificar que se cargó bien
df.head()

df["Desercion"].value_counts()

# Importar librerías necesarias
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Cargar los datos desde el archivo Excel
file_path = "datos_desercion_balanceado.xlsx"  # Asegúrate de tener este archivo en la misma carpeta
df = pd.read_excel(file_path)

# Convertir variables categóricas en valores numéricos
le = LabelEncoder()
columnas_categoricas = ["Genero", "Ubicacion", "Nivel_Socioeconomico", "Beca", "Problemas_Personales", "Desercion"]
for col in columnas_categoricas:
    df[col] = le.fit_transform(df[col])

# Separar variables predictoras (X) y variable objetivo (y)
X = df.drop(columns=["Desercion"])  # Variables predictoras
y = df["Desercion"]  # Variable objetivo (0 = No deserta, 1 = Sí deserta)

# Dividir en conjunto de entrenamiento (80%) y prueba (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalizar los datos numéricos para mejorar el rendimiento del modelo
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Entrenar el modelo de Regresión Logística
modelo = LogisticRegression()
modelo.fit(X_train_scaled, y_train)

# Hacer predicciones
y_pred = modelo.predict(X_test_scaled)

# Evaluar el modelo
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

# Imprimir resultados
print(f"Precisión del modelo: {accuracy * 100:.2f}%\n")
print("Matriz de Confusión:")
print(conf_matrix)
print("\nInforme de Clasificación:")
print(classification_rep)

# Grafica Curva de aprendizaje
import matplotlib.pyplot as plt
from sklearn.model_selection import learning_curve

# Definir tamaños de entrenamiento y calcular curvas de aprendizaje
train_sizes, train_scores, test_scores = learning_curve(
    modelo, X_train_scaled, y_train, cv=5, scoring="accuracy", n_jobs=-1, train_sizes=np.linspace(0.1, 1.0, 10)
)

# Calcular medias y desviaciones estándar
train_mean = np.mean(train_scores, axis=1)
train_std = np.std(train_scores, axis=1)
test_mean = np.mean(test_scores, axis=1)
test_std = np.std(test_scores, axis=1)

# Graficar curva de aprendizaje
plt.figure(figsize=(8, 6))
plt.plot(train_sizes, train_mean, label="Precisión en entrenamiento", color="blue")
plt.fill_between(train_sizes, train_mean - train_std, train_mean + train_std, color="blue", alpha=0.2)

plt.plot(train_sizes, test_mean, label="Precisión en validación", color="red")
plt.fill_between(train_sizes, test_mean - test_std, test_mean + test_std, color="red", alpha=0.2)

plt.xlabel("Tamaño del conjunto de entrenamiento")
plt.ylabel("Precisión")
plt.title("Curva de Aprendizaje - Regresión Logística")
plt.legend()
plt.grid()
plt.show()